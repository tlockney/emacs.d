#+title: Org-Beautify-Theme
#+begin_src emacs-lisp :tangle yes :padline no 
  ;;; org-beautify-theme.el --- A sub-theme to make org-mode more beautiful.
  ;; Copyright (C) 2014 Jonathan Arkell
  
  ;; Author: Jonathan Arkell <jonnay@jonnay.net>
  ;; package-Version: 0.1.2
  ;; Created: 5 Oct 2012
  ;; Keywords: org theme
  
  ;; This file is not part of GNU Emacs.
  ;; Released under the GPL v3.0
  
  ;;; Commentary:
  ;; An attempt to improve the typography of an org-mode file.

  ;; Load this theme over top your existing theme, and you should
  ;; be golden.  If you find any incompatibilities, let me know
  ;; with what theme and I will try and fix it.

  ;; This is part of the Emagicians Starter kit--but available
  ;; separately.

  ;; When loading a whole new theme overtop, org-beautify-theme will 
  ;; still be active with the old theme.  Just unload org-beautify-theme
  ;; and then reload it, and everything will be fine again. 

  ;; The Source for this file is here:
  ;; https://github.com/jonnay/emagicians-starter-kit/blob/master/themes/org-beautify-theme.org

  ;;; Code: 

  (deftheme org-beautify-theme "Sub-theme to beautify org mode")
#+end_src
* This theme is dedicated to my wife Shell
  Who--in her beauty, her love, and her love for beauty--has shown me
  that form can enhance function.


* Mission
  - Make org mode headlines easy to read.  In any theme.
  - Make it look more like a published book and/or desktop app, less like angry fruit salad.
  - Make it awesome to live in an org buffer.

* Changelog 
   - v0.1 :: First Release
	 - Make the colors suck a lot less, and the buffers look a lot nicer.
   - v0.1.1 :: [2014-01-06]
     - Fix checkboxes
   - v0.1.2 :: [2014-01-06]
     - Add Verdana font to fall back on

* Road map

   - Future
     - Figure out a better sub-theme infrastructure, so new themes don't break. 
     - Work on niceifying todo keywords
	 - Better color customizations
	 - Look into alternate font settings
	 - Iconficiations?
	 - Look at making headlines span the full line, and make an org-mode pull request if required
     - Controllable Properties Need to look into this: [[info:elisp#Specified%20Space][info:elisp#Specified Space]]


* Beautification
I Like Lucia Grande, so we'll start with that for a sans-serif font, but also allow for fall-backs. 

For now the beautification is:
- Reset all headlines to the base background color
- Add padding around Headlines between levels 1 through 3
- Make headline level 2 and headline level 1 bigger and sans-serif.
- Delineate the blocks nicely, and reset their foreground and background
- Set the foreground and background color of the checkboxes and make them very checkboxy
- strike through done keywords. 


* The Code

#+begin_src emacs-lisp :tangle yes
    (let* ((sans-font (cond ((x-list-fonts "Lucida Grande") '(:font "Lucida Grande"))
                            ((x-list-fonts "Verdana") '(:font "Verdana"))
                            ((x-family-fonts "Sans Serif") '(:family "Sans Serif"))
                            (nil (warn "Cannot find a Sans Serif Font.  Please report at: https://github.com/jonnay/emagicians-starter-kit/issues"))))
           (base-font-color (face-foreground 'default  nil 'default))
           (background-color (face-background 'default nil 'default))
           (headline `(:inherit default :foreground ,base-font-color))
           (primary-color (face-foreground 'mode-line nil))
           (secondary-color (face-background 'secondary-selection nil 'region))
           (padding `(:line-width 5 :color ,background-color))
           (org-highlights `(:foreground ,base-font-color :background ,secondary-color)))
  (custom-theme-set-faces 'org-beautify-theme
                          `(org-agenda-structure ((t (:inherit default ,@sans-font :height 2.0 :underline nil))))
                          `(org-level-8 ((t ,headline)))
                          `(org-level-7 ((t ,headline)))
                          `(org-level-6 ((t ,headline)))
                          `(org-level-5 ((t ,headline)))
                          `(org-level-4 ((t ,headline)))
                          `(org-level-3 ((t (,@headline  :box ,padding))))
                          `(org-level-2 ((t (,@headline ,@sans-font :height 1.25 :box ,padding))))
                          `(org-level-1 ((t (,@headline ,@sans-font :height 1.5 :box ,padding ))))
                          `(org-document-title ((t (:inherit org-level-1 :height 2.0 :underline nil :box ,padding))))
#+end_src
  
* Display Testing 

** 2nd level
*** third
**** fourth
***** fifth
****** sixth
******* seventh
******** eighth
		 - list item
		 - [X] Checkbox
		 - [ ] Empty checkbox
*** TODO foo
*** DONE foo test  
*** TODO The end of civilizaiton 
	 SCHEDULED: <2031-01-19 Sun 03:14>
*** DONE Y2k
	 CLOSED: [2000-01-01 00:00]
	:PROPERTIES:
	:FOO:      bar
	:END:
| Table |
|-------|
| row   |
| row   |




* TODO Calendar

  While not strictly org mode, the Calendar and diary is tightly integrated.

  Color Scheme 1 is going to be medium-light gray for the main
  entries, Black for today, and off-gray for the special entries.

  The following Faces are available:
  - Calendar Today Face
  - Diary Anniversary
  - Diary Button 
  - Diary
  - Diary Time
  - Holiday

  Note that the calendar actually uses the standard font lock
  keywords to customize the look of the main area. I am not entirely
  sure how to change that, without changing it for all buffers.

  - Weened :: font-lock-comment-face
  - Weekday :: font-lock-constant-face
  - Month/year :: font-lock-function-face


* Testing And Deployment
#+begin_src emacs-lisp :tangle no
(progn 
  (delete-file "org-beautify-theme.el")
  (org-babel-load-file "org-beautify-theme.org"))
#+end_src

* Fin ðŸ‘¯
#+begin_src emacs-lisp :tangle yes
(provide-theme 'org-beautify-theme)

;;; org-beautify-theme.el ends here
#+end_src

